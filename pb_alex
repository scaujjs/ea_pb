//+------------------------------------------------------------------+
//|                                                  pinbar_alex.mq4 |
//|                        Copyright 2018, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2018, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

// 可视化


//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+




bool is_disidion_already_made=false;
int thredhold_second=5; // 在开盘开始计算的th时间之内完成交易
int ticket=-1;


// 止盈止损
bool auto_close=false;  // 周期结束后是否自动平仓
bool is_threshold_stop_loss=false; //是否为止损线设定阈值，考虑到左眼的情况有各种可能，单单以左眼来做止损止盈存在问题
bool is_thrshold_take_profit=false;//是否为止盈线设定阈值，考虑到左眼的情况有各种可能，单单以左眼来做止损止盈存在问题

double lots=0.1;
int loss_point=30;
int profit_point=60;
int threshold_stop_loss=300;




bool UseAlerts = true; // Use Alerts
bool UseEmailAlerts = false; // Use Email Alerts (configure SMTP parameters in Tools->Options->Emails)

double MaxNoseBodySize = 0.33;
double MinNoseBodySize = 0.1;
double NoseBodyPosition = 0.4;
bool   LeftEyeOppositeDirection = true;
bool   NoseSameDirection = true;
bool   NoseBodyInsideLeftEyeBody = false;
double LeftEyeMinBodySize = 0.1;
double NoseProtruding = 0.5;
double NoseBodyToLeftEyeBody = 0.5;
double NoseLengthToLeftEyeLength = 0;
double LeftEyeDepth = 0.2;



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   //---- indicator buffers mapping  

   //----

//--- create timer
   EventSetTimer(60);

//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//--- destroy timer
   EventKillTimer();

  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+




// ordersent and put smile 
void pinbar_de()
  {
   
   

   double NoseLength, NoseBody, LeftEyeBody, LeftEyeLength;
   int i=1;
   //Close,Open,High,Low
   NoseLength=(High[i] - Low[i]);
   LeftEyeLength= High[i + 1] - Low[i + 1];
   NoseBody=MathAbs(Open[i] - Close[i]);
   LeftEyeBody = MathAbs(Open[i + 1] - Close[i + 1]);
   

   // Bearish Pinbar i代表 鼻子还是左眼？换种问法，小的数字在左在右 小的在右边
   if (High[i] - High[i + 1] >= NoseLength * NoseProtruding) // Nose protrusion 鼻子突起
   {
      if (NoseBody / NoseLength <= MaxNoseBodySize) // Nose body to candle length ratio 鼻子占自身比例
      {
         if (NoseBody / NoseLength >= MinNoseBodySize)
         {
            if (1 - (High[i] - MathMax(Open[i], Close[i])) / NoseLength < NoseBodyPosition) // Nose body position in bottom part of the bar 鼻子在底端
            {
               if ((!LeftEyeOppositeDirection) || (Close[i + 1] > Open[i + 1])) // Left Eye bullish if required （允许定义），左眼是上涨
               {
                  if ((!NoseSameDirection) || (Close[i] < Open[i])) // Nose bearish if required 这里应该就是判断是否鼻子和左眼相反
                  {
                     if (LeftEyeBody / LeftEyeLength  >= LeftEyeMinBodySize) // Left eye body to candle length ratio
                     {
                        if ((MathMax(Open[i], Close[i]) <= High[i + 1]) && (MathMin(Open[i], Close[i]) >= Low[i + 1])) // Nose body inside Left Eye bar 鼻子包括在左眼范围内
                        {
                           if (NoseBody / LeftEyeBody <= NoseBodyToLeftEyeBody) // Nose body to Left Eye body ratio
                           {
                              if (NoseLength / LeftEyeLength >= NoseLengthToLeftEyeLength) // Nose length to Left Eye length ratio
                              {
                                 if (Low[i] - Low[i + 1] >= LeftEyeLength * LeftEyeDepth)  // Left Eye low is low enough
                                 {
                                    if ((!NoseBodyInsideLeftEyeBody) || ((MathMax(Open[i], Close[i]) <= MathMax(Open[i + 1], Close[i + 1])) && (MathMin(Open[i], Close[i]) >= MathMin(Open[i + 1], Close[i + 1])))) // Nose body inside Left Eye body if required
                                    {
                                    
   
                                       //SendAlert("Bearish");
                                       double take_loss=NormalizeDouble(High[i]+loss_point*Point,Digits());
                                       double take_profit=NormalizeDouble(Bid-profit_point*Point,Digits());
                                       if (is_threshold_stop_loss && (take_loss-Bid)>threshold_stop_loss*Point)
                                       {
                                          take_loss=Bid+threshold_stop_loss*Point;
                                       }
                                       
                                       
                                       
                                       if (!ObjectCreate("name",OBJ_ARROW_DOWN,0,Time[i],High[i]+Point*50))
                                       {
                                          Print("Error: can't create label! code #",GetLastError());
                                       }
   
                                       ticket = OrderSend(Symbol(), OP_SELL, lots, Bid, 3, take_loss , take_profit, "My order", 16384, 0, clrGreen);
   
                                       
                                       //Print("take loss");
                                       //Print(NormalizeDouble(take_loss-Bid,Digits()));
                                       //Print("take profit");
                                       //Print(NormalizeDouble(Bid-take_profit,Digits()));
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }   
      }
   }
      
      // Bullish Pinbar
   if (Low[i + 1] - Low[i] >= NoseLength * NoseProtruding) // Nose protrusion
   {
      if (NoseBody / NoseLength <= MaxNoseBodySize) // Nose body to candle length ratio
      {
         if (NoseBody / NoseLength >= MinNoseBodySize)
         {
            if (1 - (MathMin(Open[i], Close[i]) - Low[i]) / NoseLength < NoseBodyPosition) // Nose body position in top part of the bar
            {
               if ((!LeftEyeOppositeDirection) || (Close[i + 1] < Open[i + 1])) // Left Eye bearish if required
               {
                  if ((!NoseSameDirection) || (Close[i] > Open[i])) // Nose bullish if required
                  {
                     if (LeftEyeBody / LeftEyeLength >= LeftEyeMinBodySize) // Left eye body to candle length ratio
                     {
                        if ((MathMax(Open[i], Close[i]) <= High[i + 1]) && (MathMin(Open[i], Close[i]) >= Low[i + 1])) // Nose body inside Left Eye bar
                        {
                           if (NoseBody / LeftEyeBody <= NoseBodyToLeftEyeBody) // Nose body to Left Eye body ratio
                           {
                              if (NoseLength / LeftEyeLength >= NoseLengthToLeftEyeLength) // Nose length to Left Eye length ratio
                              {
                                 if (High[i + 1] - High[i] >= LeftEyeLength * LeftEyeDepth) // Left Eye high is high enough
                                 {
                                    if ((!NoseBodyInsideLeftEyeBody) || ((MathMax(Open[i], Close[i]) <= MathMax(Open[i + 1], Close[i + 1])) && (MathMin(Open[i], Close[i]) >= MathMin(Open[i + 1], Close[i + 1])))) // Nose body inside Left Eye body if required
                                    {
                                    
                                    
                                       //SendAlert("Bullish");
   
                                       double take_loss=NormalizeDouble(Low[i]-loss_point*Point,Digits());
                                       double take_profit=NormalizeDouble(Ask+profit_point*Point,Digits());
                                       if (is_threshold_stop_loss && (Ask-take_loss)>threshold_stop_loss*Point)
                                       {
                                          take_loss=Ask-threshold_stop_loss*Point;
                                       }
                                       if (!ObjectCreate("name",OBJ_ARROW_DOWN,0,Time[i],Low[i]-Point*50))
                                       {
                                          Print("Error: can't create label! code #",GetLastError());
                                       }                                  
                                       ticket = OrderSend(Symbol(), OP_BUY, lots, Ask, 3,take_loss ,take_profit , "My order", 16384, 0, clrGreen);
   
   
                                       
                                       //Print("take loss");
                                       //Print(NormalizeDouble(Ask-take_loss,Digits()));
                                       //Print("take profit");
                                       //Print(NormalizeDouble(take_profit-Ask,Digits()));                               
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }
}



string TimeframeToString(int P)
{
   switch(P)
   {
      case PERIOD_M1:  return("M1");
      case PERIOD_M5:  return("M5");
      case PERIOD_M15: return("M15");
      case PERIOD_M30: return("M30");
      case PERIOD_H1:  return("H1");
      case PERIOD_H4:  return("H4");
      case PERIOD_D1:  return("D1");
      case PERIOD_W1:  return("W1");
      case PERIOD_MN1: return("MN1");
   }
   return("");
}


void SendAlert(string dir)
{
   string per = TimeframeToString(Period());
   if (UseAlerts)
   {
      Alert(dir + " Pinbar on ", Symbol(), " @ ", per);
      PlaySound("alert.wav");
   }
   if (UseEmailAlerts)
      SendMail(Symbol() + " @ " + per + " - " + dir + " Pinbar", dir + " Pinbar on " + Symbol() + " @ " + per + " as of " + TimeToStr(TimeCurrent()));
}


  
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
{

   
   int sec=Seconds();
   int hour=Hour();
   int min=Minute();

   
   if (hour%4==0)
   {
      if (min==0)
      {
         if (sec<thredhold_second)
         {
            
            if(!is_disidion_already_made) pinbar_de();
            
            
            is_disidion_already_made=true;
         
         }
         else is_disidion_already_made=False;
         
      
      }
   }
   if((hour+1)%4==0)
   {
      if (min==59)      
      {

         if (ticket!=-1)
         {
            if(OrderSelect(ticket,SELECT_BY_TICKET)==true)
            {
               
               if (OrderCloseTime()<D'2004.01.01 00:00')
               {
                  double lots_temp=OrderLots();
                  double price;
                  if (OrderType()==OP_BUY) price=Bid;
                  else price=Ask;
                  if (!OrderClose(ticket,lots_temp,price,3,Red))
                  {
                     Print("Error: can't create label! code #",GetLastError());
                  }
               }
               ticket=-1;
               
               
         
            }
         
         
         
         }
      }   
            
         
      
   }


     
 

     

//---

  }
//+------------------------------------------------------------------+
//| Timer function                                                   |
//+------------------------------------------------------------------+
void OnTimer()
  {
//---

  }
//+------------------------------------------------------------------+
//| Tester function                                                  |
//+------------------------------------------------------------------+
double OnTester()
  {
//---
   double ret=0.0;
//---

//---
   return(ret);
  }
//+------------------------------------------------------------------+
